#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('cadastroimagem:server');
var http = require('http');
const redis = require('redis');

const server = http.createServer(app);

const ronin = require('ronin-server');
const mocks = require('ronin-mocks');

const serverRonin = ronin.server()

serverRonin.use('/', mocks.server(serverRonin.Router(), false, true))
serverRonin.start();


/**
 * Get port from environment and store in Express.
 */

const normalizePort = (val) => {
  const port = parseInt(val, 10);
  const namedPipe = Number.isNaN(port) && val;
  const namedPort = port >= 0 && port;
  return !namedPipe ? namedPort : namedPipe;
};

const port = normalizePort(process.env.PORT || "6004");

app.set("porta", port);

const pipeOrPort = {
  true: `Pipe ${port}`,
  false: `Port ${port}`,
};

const errorCode = {
  EACCES: `${pipeOrPort[typeof port === "string"]} requer privilégios.`,
  EADDRINUSE: `${pipeOrPort[typeof port === "string"]} já se encontra em uso.`,
};

const OnError = (error) => {
  const messageError =
    error.syscall !== "listen" ? error : errorCode[error.code];
  // eslint-disable-next-line no-console
  console.log(messageError);
};

const OnListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
};

server.listen(port);
server.on("error", OnError);
server.on("listening", OnListening);


const client = redis.createClient();

client.on('connect', function () {
  console.log('O serviço redis está conectado!');
});


// eslint-disable-next-line no-console
console.log("Microserviço Login funcionado na porta: ", port);
